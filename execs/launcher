#!/bin/python3

import re
import sys
import yaml
import subprocess
from os import environ, listdir
from pathlib import Path
from functools import reduce

TERMINAL = environ["GTERM"]
USER = environ["USER"]
CONFIG = f"/home/{USER}/.config/launcher.yaml"

BROWSER_MIMES = ["image", "video", "document"]
BROWSER_REGEXP = ["(((http)|(https)|(ws)|(wss))://)|(.*\\.pdf$)"]

def yaml_load(file):
	with open(file) as stream:
		return yaml.safe_load(stream)

def with_term(cmd):
	if len(cmd) > 0:
		return [TERMINAL, "-e"]+cmd
	return [TERMINAL]

def regexp_filter(opt, arg):
	for exp in opt.get("regexps") or []:
		if re.compile(exp, re.IGNORECASE).match(arg):
			return True
	return False

def filter_by(options, arg=None):
	filters = []
	if arg:
		filters.append(lambda opt: regexp_filter(opt, arg))
		result = subprocess.run(
			["xdg-mime", "query", "filetype", arg],
			stdout = subprocess.PIPE,
		)
		if result.returncode == 0:
			mime = result.stdout.decode("utf-8").strip()
			filters.append(
				lambda opt: mime in (opt.get("mimes") or [])
			)
	if len(filters) < 1:
		return options
	filters.append(
		lambda opt: opt.get("show-allways")
	)
	new_options = {}
	for option in options:
		for filt in filters:
			if filt(options[option]):
				new_options[option] = options[option]
				continue
	return new_options

def process_options(options, conf):
	for option in options:
		params = options[option]
		if "cmd" in params:
			if isinstance(params["cmd"], str):
				params["cmd"] = [params["cmd"]]
		else:
			params["cmd"] = [option]
		if params.get("terminal"):
			params["cmd"] = with_term(params["cmd"])
			del params["terminal"]
		if isinstance(params.get("mimes"), str):
			params["mimes"] = [params["mimes"]]
		if params.get("mime-filters"):
			if not params.get("mimes"):
				params["mimes"] = []
			filters = params["mime-filters"]
			if isinstance(filters, str):
				filters = [filters]
			for filt in filters:
				params["mimes"] += conf["mime-filters"][filt]
			del params["mime-filters"]
	return options

def get_fox_options(name = "mozilla/firefox", flatname = "org.mozilla.firefox", menu = "firefox"):
	FOX_PROFILES_DIR = Path(f"~/.var/app/{flatname}/cache/{name}/").expanduser()
	ret = {}
	try:
		ret = reduce(
			lambda d, p: d | {
				menu+" "+p.split(".", 1)[1]:
				{
					"cmd": ["flatpak", "run", flatname, "-P", p.split(".", 1)[1]],
					"env": {"GDK_DPI_SCALE": "1.5"},
					"mime-filters": BROWSER_MIMES,
					"regexps": BROWSER_REGEXP,
				}
			},
			listdir(FOX_PROFILES_DIR),
			ret
		)
	except FileNotFoundError as e:
		print(e)
	ret |= {
		f"new {menu}": {
			"cmd": ["flatpak", "run", flatname, "--ProfileManager"],
			"mime-filters": BROWSER_MIMES,
			"env": {"GDK_DPI_SCALE": "1.5"},
			"no-term": True,
			"regexps": BROWSER_REGEXP,
		}
	}
	return ret

def get_wolf_options():
	ret = get_fox_options(
		"librewolf",
		"io.gitlab.librewolf-community",
		"librewolf",
	)
	if "librewolf default" in ret:
		del ret["librewolf default"]
	return ret

def get_chrome_options():
	return {
		"chromium": {
			"cmd": ["flatpak", "run", "io.github.ungoogled_software.ungoogled_chromium"],
			"mime-filters": BROWSER_MIMES,
			"regexps": BROWSER_REGEXP,
		},
		# TODO: Add oneshot chromium via boxxy
		"chromium-oneshot": {
			"cmd": ["flatpak", "run", "io.github.ungoogled_software.ungoogled_chromium"],
			"mime-filters": BROWSER_MIMES,
			"regexps": BROWSER_REGEXP,
		},
	}

def rofi(prompt, stdin):
	cmd = ["rofi", "-dmenu", "-p", prompt]
	res = subprocess.run(cmd, input=stdin.encode("utf-8"), capture_output=True)
	if res.stdout:
		return res.stdout.decode("utf-8").replace("\n", "")
	return ""

conf = yaml_load(CONFIG)

if not sys.stdin.isatty():
	stdin = sys.stdin.readline().strip()
	if stdin:
		sys.argv.append(stdin)

while True:
	options = process_options(
		get_fox_options() \
		| get_wolf_options() \
		| get_chrome_options() \
		| conf["options"],
		conf
	)

	prompt = "app"

	if len(sys.argv) > 1:
		options = filter_by(options, sys.argv[1])
		prompt = f"Open {sys.argv[1]} with"

	selection = rofi(prompt, "\n".join(options.keys()))

	if selection == "":
		print("canceled by user")
		break

	if selection in options:
		cmd = options[selection]["cmd"]
		if len(sys.argv) > 1:
			cmd += sys.argv[1:]

		if "env" in options[selection]:
			nenvs = options[selection]["env"]
			for name in nenvs:
				environ[name] = nenvs[name]

		if options[selection].get("no-term"):
			print("Running", " ".join(cmd))
			subprocess.run(cmd)
			continue
		else:
			print("Launching", " ".join(cmd))
			subprocess.Popen(cmd, start_new_session=True)
			break
